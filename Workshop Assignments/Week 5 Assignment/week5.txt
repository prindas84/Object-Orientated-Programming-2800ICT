#include <iostream>
#include <vector>
#include <string>
using namespace std;


// Media Item base class.
class MediaItem
{
private:
    string title;
    int releaseYear;

public:
    MediaItem(string title = "", int year = 0);
    // Pure virtual function.
    virtual void display() const = 0;
    friend ostream &operator<<(ostream &out, const MediaItem &mem);
};

// Constructor function.
MediaItem::MediaItem(string title, int year) : title(title), releaseYear(year) {}

// Overloaded function
ostream &operator<<(ostream &out, const MediaItem &mem)
{
    out << "title: " << mem.title << ", releaseYear: " << mem.releaseYear;
    return out;
}



// Digital Copy abstract base class.
class DigitalCopy
{
public:
    // Pure virtual function.
    virtual void showDownloadDetails() const = 0;
};



// Book derived class.
class Book : public MediaItem
{
private:
    string author;
    int pageCount;

public:
    Book(string title = "", int year = 0, string author = "", int page = 0);
    void display() const override;
};

// Constructor function.
Book::Book(string title, int year, string author, int page) : MediaItem(title, year), author(author), pageCount(page) {}

// Call the base class to print, then print from the dervied class.
void Book::display() const
{
    cout << "Book: " << *this << ", Pages: " << this->pageCount << endl;
}



// Movie derived class. Derived from multiple base classes.
class Movie : public MediaItem, public DigitalCopy
{
private:
    string director;
    int duration;

public:
    Movie(string title = "", int year = 0, string director = "", int duration = 0);
    void display() const override;
    void showDownloadDetails() const override;
};

// Constructor function.
Movie::Movie(string title, int year, string director, int duration) : MediaItem(title, year), director(director), duration(duration) {}

// Call the base class to print, then print from the dervied class.
void Movie::display() const
{
    cout << "Movie: " << *this << ", Duration: " << this->duration << endl;
}

// Call the abstract base class, pure virtual function.
void Movie::showDownloadDetails() const
{
    cout << "Download available at [URL]" << endl;
}



// Music Album derived class. Derived from multiple base classes.
class MusicAlbum : public MediaItem, public DigitalCopy
{
private:
    string artist;
    int trackCount;

public:
    MusicAlbum(string title = "", int year = 0, string artist = "", int trackCount = 0);
    void display() const override;
    void showDownloadDetails() const override;
};

// Constructor function.
MusicAlbum::MusicAlbum(string title, int year, string artist, int trackCount) : MediaItem(title, year), artist(artist), trackCount(trackCount) {}

// Call the base class to print, then print from the dervied class.
void MusicAlbum::display() const
{
    cout << "Music Album: " << *this << ", Tracks: " << this->trackCount << endl;
}

// Call the abstract base class, pure virtual function.
void MusicAlbum::showDownloadDetails() const
{
    cout << "Music album download details: [URL]" << endl;
}



int main()
{
    vector<MediaItem *> items;
    items.push_back(new Book("1984", 1949, "George Orwell", 328));
    items.push_back(new Movie("Inception", 2010, "Christopher Nolan", 148));
    items.push_back(new MusicAlbum("Thriller", 1982, "Michael Jackson", 9));

    int idx = 1;
    for (auto item : items)
    {
        cout << "Task " << idx++ << ": ";
        item->display();

        DigitalCopy *digital = dynamic_cast<DigitalCopy *>(item);
        if (digital)
        {
            cout << "Task " << idx++ << ": ";
            digital->showDownloadDetails();
        }
    }
    for (auto item : items)
        delete item;

    items.clear();

    return 0;
}