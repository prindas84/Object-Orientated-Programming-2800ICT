#define _USE_MATH_DEFINES

#include <iostream>
#include <cmath> // for std::pow and M_PI, for example M_PI * std::pow(radius, 2);
#include "point.cpp"
#include "circle.cpp"
using namespace std;

class Point
{
private:
    double *x;
    double *y;

public:
    Point(double x = 0, double y = 0);
    ~Point();
    Point(const Point &other);
    Point(Point &&other) noexcept;
    Point &operator=(const Point &other);
    Point &operator=(Point &&other) noexcept;
    void setX(double x);
    void setY(double y);
    double getX() const { return *x; }
    double getY() const { return *y; }
};

// Constructor Function.
Point::Point(double x, double y)
{
    this->x = new double(x);
    this->y = new double(y);
}

// Destructor Function.
Point::~Point()
{
    delete x;
    delete y;
}

// Copy Constructor.
Point::Point(const Point &other)
{
    cout << "Point: Copy constructor\n";
    x = new double(*(other.x));
    y = new double(*(other.y));
}

// Move Constructor.
Point::Point(Point &&other) noexcept
{
    cout << "Point: Move constructor\n";
    x = other.x;
    y = other.y;
    other.x = nullptr;
    other.y = nullptr;
}

// Copy Assignment
Point &Point::operator=(const Point &other)
{
    cout << "Point: Copy assignment\n";
    if (this != &other)
    {
        // Release the current resources.
        delete x;
        delete y;

        // Dereference the value at other X, Y and assign it to the new object.
        x = new double(*other.x);
        y = new double(*other.y);
    }
    return *this;
}

// Move Assignment
Point &Point::operator=(Point &&other) noexcept
{
    cout << "Point: Move assignment\n";
    if (this != &other)
    {
        // Release the current resources.
        delete x;
        delete y;

        // Transfer the resource to the new object.
        x = other.x;
        y = other.y;

        // Set the original pointer to null.
        other.x = nullptr;
        other.y = nullptr;
    }
    return *this;
}

// Set the X pointer to X value.
void Point::setX(double x)
{
    *(this->x) = x;
}

// Set the Y pointer to Y value.
void Point::setY(double y)
{
    *(this->y) = y;
}

class Circle
{
private:
    Point center;
    double radius;

public:
    Circle(Point center, double radius) : center(center), radius(radius){};
    Circle(const Circle &other) : center(other.center), radius(other.radius) { cout << "Circle: Copy constructor\n"; };
    Circle(Circle &&other) noexcept : center(std::move(other.center)), radius(other.radius) { cout << "Circle: Move constructor\n"; };
    Circle &operator=(const Circle &other);
    Circle &operator=(Circle &&other) noexcept;
    void setCenter(const Point &newCenter);
    void setRadius(double newRadius);
    Point getCenter() const;
    double getRadius() const;
    double calculateArea() const;
    friend double operator+(const Circle &c1, const Circle &c2);
};

// Copy Assignment
Circle &Circle::operator=(const Circle &other)
{
    cout << "Circle: Copy assignment\n";
    if (this != &other)
    {
        center = other.center;
        radius = other.radius;
    }

    return *this;
}

// Move Assignment
Circle &Circle::operator=(Circle &&other) noexcept
{
    cout << "Circle: Move assignment\n";
    if (this != &other)
    {
        // Transfer the resource to the new object.
        center = std::move(other.center);
        radius = other.radius;
    }
    return *this;
}

// Set the centre of a circle to a new point.
void Circle::setCenter(const Point &newCenter)
{
    center = newCenter;
}

// Set the radius of a circle.
void Circle::setRadius(double newRadius)
{
    radius = newRadius;
}

// Get the point of a circle.
Point Circle::getCenter() const
{
    return center;
}

// Get the radius of a circle.
double Circle::getRadius() const
{
    return radius;
}

// Calculate the area of two circles.
double Circle::calculateArea() const
{
    return M_PI * std::pow(radius, 2);
}

// Calculate the combined area of two circles.
double operator+(const Circle &c1, const Circle &c2)
{
    return c1.calculateArea() + c2.calculateArea();
}

int main()
{
    Point p1(1.0, 1.0);
    Point p2(2.0, 2.0);

    cout << "output 1: " << endl;
    Circle c1(p1, 5.0);
    cout << endl;

    cout << "output 2: " << endl;
    Circle c2 = c1; // Test Point and Circle copy constructor
    cout << endl;

    cout << "output 3: " << endl;
    Circle c3(std::move(c1)); // Test Point and Circle move constructor
    cout << endl;

    cout << "output 4: " << endl;
    Circle c4(p2, 10.0);
    cout << endl;

    cout << "output 5: " << endl;
    c4 = c2; // Test copy assignment
    cout << endl;

    cout << "output 6: " << endl;
    c4 = std::move(c3); // Test move assignment
    cout << endl;

    cout << "output 7: " << endl;
    // Test friend function (addition of areas)
    double totalArea = c2 + c4;
    std::cout << "Total area of c2 and c4: " << totalArea << std::endl;

    return 0;
}
